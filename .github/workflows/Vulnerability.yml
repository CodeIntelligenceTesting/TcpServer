name: Vulnerability Assessment

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches: [ main ]

env:
  FUZZING_SERVER_ADDRESS: grpc.code-intelligence.com:443
  WEB_APP_ADDRESS: https://app.code-intelligence.com
  CHECKOUT_DIR: TcpServer/
  CIFUZZ_DOWNLOAD_URL: "https://github.com/CodeIntelligenceTesting/cifuzz/releases/latest/download/cifuzz_installer_linux_amd64"
  CIFUZZ_INSTALL_DIR: ./cifuzz
  FUZZING_ARTIFACT: fuzzing-artifact.tar.gz
  BUILD_TYPE: Release

jobs:
  fuzz-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          repository: gladzeka/TcpServer
          ref: main 
           
      - name: Create Input.txt
        run: |
          echo "1" > input.txt
          echo ",CIAO_Zac" >> input.txt
          echo ",2" >> input.txt

      - name: Setup CMake
        run: |
          sudo apt-get install -y cmake

      - name: Download CMakeLists.txt
        run: |
          curl -sSL -o CMakeLists.txt https://github.com/gladzeka/TcpServer/raw/main/CMakeLists.txt
    
          
      - name: Create Destination Directory
        run: |
          mkdir -p ${{ env.CHECKOUT_DIR }}/build/
          cp CMakeLists.txt ${{ env.CHECKOUT_DIR }}
          ls ${{ env.CHECKOUT_DIR }}
        

      - name: Install cifuzz
        run: |
          curl --fail --silent --show-error --location -o cifuzz_installer "$CIFUZZ_DOWNLOAD_URL"
          chmod u+x cifuzz_installer
          ./cifuzz_installer --install-dir $CIFUZZ_INSTALL_DIR
       
      - name: Setup Environment
        run: |
          sudo apt-get update

      - name: Build Server
        run: |      
          cmake .
          cmake --build .

      - name: List Directories 
        run: | 
          pwd && ls # display the working directory and List the files in the current directory 


      - name: Start Server
        run: |        
          ./tcp_server &  

      - name: Start Client 
        run: |
          cd test/Fuzzing/inputvalidation.py  | python inputvalidation.py 
          ./tcp_client 
           #cat input.txt | ./tcp_client  
           #echo -e "1\n Mio msg" | ./tcp_client
        continue-on-error: true 
           
      - name: My Fuzz Client 
        run: |
         cd test/Fuzzing  &&  ls
         python inputvalidation.py &
      
  
        
      - name: Save Fuzz Test Results
        if: always()
        run: |
          # Save the fuzzing test results to an artifact or a file for further analysis
          # Example command:
          # - cp fuzz_results.txt ${{ env.CHECKOUT_DIR }}/results/fuzz_results.txt

      - name: Upload Fuzz Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Fuzz Test Results
          path: ${{ env.CHECKOUT_DIR }}/results
