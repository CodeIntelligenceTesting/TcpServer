name: Vulnerability Assessment

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches: [ main ]

env:
  # The fuzzing server gRPC URL.
  FUZZING_SERVER_ADDRESS: grpc.code-intelligence.com:443
  # The fuzzing server HTTP URL.
  WEB_APP_ADDRESS: https://app.code-intelligence.com
  # Directory in which the repository will be cloned.
  CHECKOUT_DIR: checkout-dir/
  CIFUZZ_DOWNLOAD_URL: "https://github.com/CodeIntelligenceTesting/cifuzz/releases/latest/download/cifuzz_installer_linux_amd64"
  CIFUZZ_INSTALL_DIR: ./cifuzz
  FUZZING_ARTIFACT: fuzzing-artifact.tar.gz
  BUILD_TYPE: Release

jobs:
  fuzz-test:
    runs-on: ubuntu-latest
    steps:
     - id: Checkout-Repo
       name: Checkout Repository
       uses: actions/checkout@v2
       with:
          path: ${{ env.CHECKOUT_DIR }}
    
     - id: CopyCmake
       name: Copy CMakeLists.txt
       run: |
            cp https://github.com/gladzeka/TcpServer/CMakeLists.txt /home/runner/work/TcpServer/TcpServer/CMakeLists.txt
   
     - id: CmakeConfig
       name: Configure CMake
       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
       
       run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
       
     - id: BuilCmake
       name: Build
       # Build your program with the given configuration
       run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  
     - id: TesCmake
       name: Test
       working-directory: ${{github.workspace}}/build
       # Execute tests defined by the CMake configuration.
       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
       run: ctest -C ${{env.BUILD_TYPE}}

     - id: install-cifuzz
       name: Install cifuzz
       run: |
          curl --fail --silent --show-error --location -o cifuzz_installer "$CIFUZZ_DOWNLOAD_URL"
          chmod u+x cifuzz_installer
          ./cifuzz_installer --install-dir $CIFUZZ_INSTALL_DIR
       
     - id: Envs
       name: Setup Environment
       run: |
          # Set up the necessary dependencies and environment for the fuzz test
          # Install any required packages or tools
          # Example commands:
          # - sudo apt-get update
          # - sudo apt-get install <package-name>
       
     - id: Build
       name: Build Server
       run: |
          # Build the server application
          # Replace the command with the actual build command for your server application
          # Example command:
          # - g++ server.cpp -o server

     - name: Build Client
       run: |
          # Build the client application
          # Replace the command with the actual build command for your client application
          # Example command:
          # - g++ client.cpp -o client

     - name: Start Server
       run: |
          # Start the server before running the fuzz test
          # Replace the command with the actual command to start the server
          # Example command:
          # - ./server

     - name: Run Fuzz Test
       run: |
          # Run the fuzz test on the client application
          # Replace the command with the actual fuzz test command for your client application
          # Example command:
          # - ./client

     - name: Save Fuzz Test Results
       if: always()
       run: |
          # Save the fuzz test results to an artifact or a file for further analysis
          # Replace the command with the necessary steps to save the results
          # Example command:
          # - cp fuzz_results.txt $GITHUB_WORKSPACE/fuzz_results.txt

     - name: Upload Fuzz Test Results
       if: always()
       uses: actions/upload-artifact@v2
       with:
          name: Fuzz Test Results
          path: <path-to-fuzz-test-results>  # Replace with the actual path to the fuzz test results
