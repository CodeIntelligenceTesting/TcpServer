name: Vulnerability Assessment

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches: [ main ]

env:
  # The fuzzing server gRPC URssssL.c
  FUZZING_SERVER_ADDRESS: grpc.code-intelligence.com:443
  # The fuzzing server HTTP URL......
  WEB_APP_ADDRESS: https://app.code-intelligence.com

  # Directories in which the repository will be cloned.

  CHECKOUT_DIR: checkout-dir/
  CIFUZZ_DOWNLOAD_URL: "https://github.com/CodeIntelligenceTesting/cifuzz/releases/latest/download/cifuzz_installer_linux_amd64"
  CIFUZZ_INSTALL_DIR: ./cifuzz
  FUZZING_ARTIFACT: fuzzing-artifact.tar.gz
  BUILD_TYPE: Release

jobs:
  fuzz-test:
    runs-on: ubuntu-latest

    steps:
     - id: Checkout-Repo
       name: Checkout Repository
       uses: actions/checkout@v2
       with:
          repository: gladzeka/TcpServer
          refer: TestChironda/TcpServer
          path: ${{ env.CHECKOUT_DIR }}
     - id: SetupCmake
       name: Setup Cmake
       run: |
            sudo apt-get install -y cmake
            cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}


     - id: DownloadCmake
       name: Download CMakeLists.txt
       run: |
         curl -sSL -o CMakeLists.txt https://github.com/gladzeka/TcpServer/raw/main/CMakeLists.txt
      
     - id: Destination
       name: Create Destination Directory

       run: mkdir -p /home/runner/work/TcpServer/build/

     - id: install-cifuzz
       name: Install cifuzz
       run: |
          curl --fail --silent --show-error --location -o cifuzz_installer "$CIFUZZ_DOWNLOAD_URL"
          chmod u+x cifuzz_installer
          ./cifuzz_installer --install-dir $CIFUZZ_INSTALL_DIR
       
     - id: Envs
       name: Setup Environment
       run: |
          # Set up the necessary dependencies and environment for the fuzz test
          # Install any required packages or tools
          # Example commands:
           sudo apt-get update
            
       
     - id: Build
       name: Build Server
       run: |
        
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}


     - name: Build Client
       run: |
          # Build the client application
          # Replace the command with the actual build command for your client application
          # Example command:
          g++ client.cpp -o client

     - name: Start Server
       run: |
          # Start the server before running the fuzz test
          # Replace the command with the actual command to start the server
          # Example command:
           ./server

     - name: Run Fuzz Test
       run: |
          # Run the fuzz test on the client application
          # Replace the command with the actual fuzz test command for your client application
          # Example command:
          - ./client

     - name: Save Fuzz Test Results
       if: always()
       run: |
          # Save the fuzz test results to an artifact or a file for further analysis
          # Replace the command with the necessary steps to save the results
          # Example command:
          # - cp fuzz_results.txt $GITHUB_WORKSPACE/fuzz_results.txt

     - name: Upload Fuzz Test Results
       if: always()
       uses: actions/upload-artifact@v2
       with:
          name: Fuzz Test Results
          path: ${{ env.CHECKOUT_DIR }}/results  # Replace with the actual path to the fuzz test results
